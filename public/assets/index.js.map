{"version":3,"sources":["index.js"],"names":["i","s","o","g","r","a","m","q","push","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","window","document","ga","userSwitch","id","positions","callback","index","getElementById","addEventListener","length","container","canvas","context","getContext","particles","defaults","shape","phase","value","parseInt","Math","random","x","width","clientWidth","dispatchEvent","Event","color","state","sin","y","renderers","circle","arc","radius","triangle","len","moveTo","lineTo","bar","alpha","height","update","floor","velocity","draw","beginPath","fillStyle","fill","animate","clearRect","requestAnimationFrame","maxBubbles","addBubbles","setInterval","clearInterval"],"mappings":"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","file":"index.js","sourcesContent":["(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\nga('create', 'UA-25609352-3', 'auto');\nga('send', 'pageview');\n\n(() => {\n    function userSwitch(id, positions, callback) {\n        let index = 0;\n\n        document.getElementById(id).addEventListener('click', function(){\n            index = index >= (positions.length - 1)\n                ? 0 : index + 1;\n        })\n    }\n\n    const container = document.getElementsByTagName('footer')[0];\n    const canvas = document.getElementsByTagName('canvas')[0];\n    const context = canvas.getContext('2d');\n    const particles = [];\n\n    const defaults = {\n        shape: 'circle',\n        phase: () => {},\n    };\n\n    userSwitch('color', [0, 1, 2], value => {\n        if (value == 0) {\n            defaults.phase = () => null\n        }\n        else if (value == 1) {\n            defaults.phase = () => parseInt(Math.random() * 20);\n        }\n        else if (value == 2) {\n            defaults.phase = (x) => x / 180;\n        }\n    });\n\n    userSwitch('shape', ['circle', 'triangle', 'bar'], value => {\n        defaults.shape = value;\n    })\n\n    // keep the canvas at the right size as the window changes\n    window.addEventListener('resize', () => {\n        canvas.width = container.clientWidth;\n    });\n    window.dispatchEvent(new Event('resize'));\n\n    function color(state) {\n        return state.phase\n            ? parseInt(Math.sin(0.0314 * state.y + 2 + state.phase) * 127 + 128) +','+\n              parseInt(Math.sin(0.0314 * state.y + 0 + state.phase) * 127 + 128) +','+\n              parseInt(Math.sin(0.0314 * state.y + 4 + state.phase) * 127 + 128)\n            : state.color;\n    }\n\n    const renderers = {\n        'circle': (state) => {\n            context.arc(state.x, state.y - state.radius, state.radius, 0, 6.2832);\n        },\n        'triangle': (state) => {\n            const len = state.radius * 3;\n\n            context.moveTo(state.x, state.y)\n            context.lineTo(state.x + (len/2), state.y-(len*.89))\n            context.lineTo(state.x + len, state.y)\n        },\n        'bar': (state) => {\n            const width = (state.radius * 2) + (state.alpha * 10);\n            const height = 120;\n\n            context.moveTo(state.x, state.y)\n            context.lineTo(state.x + width, state.y)\n            context.lineTo(state.x + width, state.y - height)\n            context.lineTo(state.x, state.y - height)\n        },\n    }\n\n    function update(state) {\n        if (!state || state.alpha < 0) {\n            const radius = 0.05 + Math.random() * 5.3;\n            const x = Math.floor(Math.random() * (canvas.width - (radius*2) - 3)) + radius;\n\n            return {\n                x: x,\n                y: 0,\n                alpha: 0.6 + Math.random() * 0.3,\n                radius: radius,\n                velocity: Math.floor(Math.random() * 1.5) + 1,\n                color: '100,100,100',\n                phase: defaults.phase(x),\n                shape: defaults.shape,\n            };\n        }\n\n        return {\n            x: state.x,\n            y: state.y + state.velocity,\n            alpha: state.alpha - 0.025,\n            radius: state.radius,\n            velocity: state.velocity + 0.1,\n            color: color(state),\n            phase: state.phase,\n            shape: state.shape,\n        };\n    }\n\n    function draw(state) {\n        context.beginPath();\n\n        renderers[state.shape](state);\n\n        context.fillStyle = 'rgba('+ state.color +','+ state.alpha +')';\n        context.fill();\n    }\n\n    function animate() {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        for (let i = particles.length; i--;) {\n            draw(particles[i] = update(particles[i]));\n        }\n\n        requestAnimationFrame(animate);\n    }\n\n    // if we add all the particles at once then they come in waves\n    const maxBubbles = canvas.width / 5;\n    const addBubbles = setInterval(() => {\n        if (particles.length > maxBubbles) {\n            return clearInterval(addBubbles);\n        }\n\n        for (let x = 0; x < 10; x++) {\n            particles.push(update());\n        }\n    }, 100);\n\n    animate();\n})();\n"],"sourceRoot":"/source/"}
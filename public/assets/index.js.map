{"version":3,"sources":["index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","s","o","g","r","a","m","q","push","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","window","document","ga","userSwitch","id","positions","callback","index","set","getElementById","addEventListener","container","canvas","context","getContext","particles","defaults","shape","phase","phaser","parseInt","Math","sin","join","colorSwitch","value","console","log","random","x","shapeSwitch","width","clientWidth","dispatchEvent","Event","color","state","y","update","alpha","radius","floor","velocity","renderers","circle","arc","triangle","len","moveTo","lineTo","bar","height","draw","beginPath","fillStyle","fill","animate","clearRect","requestAnimationFrame","maxBubbles","addBubbles","setInterval","clearInterval"],"mappings":"AAAA,YAEA,IAAIA,UAAWC,OAAOC,QAAU,SAAUC,QAAU,IAAK,GAAIC,GAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,GAAIG,QAASF,UAAUD,EAAI,KAAK,GAAII,OAAOD,QAAQ,CAAE,GAAIN,OAAOQ,UAAUC,eAAeC,KAAKJ,OAAQC,KAAM,CAAEL,OAAOK,KAAOD,OAAOC,OAAY,MAAOL,UAFvP,SAAUC,EAAGQ,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GACxBb,EAAE,yBAA2BW,CAC7BX,GAAEW,GAAKX,EAAEW,IAAM,YACVX,EAAEW,GAAGG,EAAId,EAAEW,GAAGG,OAASC,KAAKd,YAEjCD,EAAEW,GAAGK,EAAI,EAAI,GAAIC,KACjBL,GAAIJ,EAAEU,cAAcT,GACpBI,EAAIL,EAAEW,qBAAqBV,GAAG,EAC9BG,GAAEQ,MAAQ,CACVR,GAAES,IAAMX,CACRG,GAAES,WAAWC,aAAaX,EAAGC,KAC9BW,OAAQC,SAAU,SAAU,0CAA2C,KAC1EC,IAAG,SAAU,gBAAiB,OAC9BA,IAAG,OAAQ,WAEX,SAASC,YAAWC,GAAIC,UAAWC,UAC/B,GAAIC,OAAQ,CACZ,IAAIC,KAAMH,UAAUE,MAEpBN,UAASQ,eAAeL,IAAIM,iBAAiB,QAAS,WAClDH,MAAQA,OAAUF,UAAU3B,OAAS,EAC/B,EAAI6B,MAAQ,CAClBC,KAAMF,SAASD,UAAUE,SAG7B,OAAO,YAAA,MAAMC,OAGjB,WACI,GAAMG,WAAYV,SAASN,qBAAqB,UAAU,EAC1D,IAAMiB,QAASX,SAASN,qBAAqB,UAAU,EACvD,IAAMkB,SAAUD,OAAOE,WAAW,KAClC,IAAMC,aAEN,IAAMC,WACFC,MAAO,SACPC,MAAO,QAAAA,WAGX,IAAMC,QAAS,QAATA,QAAkB3C,EAAG0C,OACvB,OACIE,SAASC,KAAKC,IAAI,MAAS9C,EAAI,EAAI0C,OAAS,IAAM,KAClDE,SAASC,KAAKC,IAAI,MAAS9C,EAAI,EAAI0C,OAAS,IAAM,KAClDE,SAASC,KAAKC,IAAI,MAAS9C,EAAI,EAAI0C,OAAS,IAAM,MACpDK,KAAK,KAGX,IAAMC,aAAcrB,WAAW,SAAU,SAAU,QAAS,WAAY,SAAAsB,OACpEC,QAAQC,IAAIF,MACZ,QAAOA,OACH,IAAK,SACDT,SAASE,MAAQ,WAAA,MAAM,MAC3B,MACA,KAAK,QACDF,SAASE,MAAQ,WAAA,MAAME,UAASC,KAAKO,SAAW,IACpD,MACA,KAAK,UACDZ,SAASE,MAAQ,SAACW,GAAD,MAAOA,GAAI,IAChC,SAIR,IAAMC,aAAc3B,WAAW,SAAU,SAAU,WAAY,OAAQ,SAAAsB,OACnET,SAASC,MAAQQ,OAIrBzB,QAAOU,iBAAiB,SAAU,WAC9BE,OAAOmB,MAAQpB,UAAUqB,aAE7BhC,QAAOiC,cAAc,GAAIC,OAAM,UAI/B,SAASC,OAAMC,OACX,MAAOA,OAAMlB,MACPC,OAAOiB,MAAMC,EAAGD,MAAMlB,OACtBkB,MAAMD,MAGhB,QAASG,QAAOF,OACZ,IAAKA,OAASA,MAAMG,MAAQ,EAAG,CAC3B,GAAMC,QAAS,IAAOnB,KAAKO,SAAW,GACtC,IAAMC,GAAIR,KAAKoB,MAAMpB,KAAKO,UAAYhB,OAAOmB,MAASS,OAAO,EAAK,IAAMA,MACxE,QACIX,EAAGA,EACHQ,EAAG,EACHE,MAAO,GAAMlB,KAAKO,SAAW,GAC7BY,OAAQA,OACRE,SAAUrB,KAAKoB,MAAMpB,KAAKO,SAAW,KAAO,EAC5CO,MAAO,cACPjB,MAAOF,SAASE,MAAMW,GACtBZ,MAAOD,SAASC,OAIxB,MAAA7C,aACOgE,OACHC,EAAGD,MAAMC,EAAID,MAAMM,SACnBH,MAAOH,MAAMG,MAAQ,KACrBG,SAAUN,MAAMM,SAAW,GAC3BP,MAAOA,MAAMC,SAIrB,GAAMO,YACFC,OAAU,QAAAA,QAACR,OACPvB,QAAQgC,IAAIT,MAAMP,EAAGO,MAAMC,EAAID,MAAMI,OAAQJ,MAAMI,OAAQ,EAAG,SAElEM,SAAY,QAAAA,UAACV,OACT,GAAMW,KAAMX,MAAMI,OAAS,CAE3B3B,SAAQmC,OAAOZ,MAAMP,EAAGO,MAAMC,EAC9BxB,SAAQoC,OAAOb,MAAMP,EAAKkB,IAAI,EAAIX,MAAMC,EAAGU,IAAI,IAC/ClC,SAAQoC,OAAOb,MAAMP,EAAIkB,IAAKX,MAAMC,IAExCa,IAAO,QAAAA,KAACd,OACJ,GAAML,OAASK,MAAMI,OAAS,EAAMJ,MAAMG,MAAQ,EAClD,IAAMY,QAAS,GAEftC,SAAQmC,OAAOZ,MAAMP,EAAGO,MAAMC,EAC9BxB,SAAQoC,OAAOb,MAAMP,EAAIE,MAAOK,MAAMC,EACtCxB,SAAQoC,OAAOb,MAAMP,EAAIE,MAAOK,MAAMC,EAAIc,OAC1CtC,SAAQoC,OAAOb,MAAMP,EAAGO,MAAMC,EAAIc,SAI1C,SAASC,MAAKhB,OACVvB,QAAQwC,WAERV,WAAUP,MAAMnB,OAAOmB,MAEvBvB,SAAQyC,UAAY,QAASlB,MAAMD,MAAO,IAAKC,MAAMG,MAAO,GAC5D1B,SAAQ0C,OAGZ,QAASC,WACL3C,QAAQ4C,UAAU,EAAG,EAAG7C,OAAOmB,MAAOnB,OAAOuC,OAE7C,KAAK,GAAI3E,GAAIuC,UAAUrC,OAAQF,KAAM,CACjC4E,KAAKrC,UAAUvC,GAAK8D,OAAOvB,UAAUvC,KAGzCkF,sBAAsBF,SAI1B,GAAMG,YAAa/C,OAAOmB,MAAQ,EAClC,IAAM6B,YAAaC,YAAY,WAC3B,GAAI9C,UAAUrC,OAASiF,WAAY,CAC/B,MAAOG,eAAcF,YAGzB,IAAK,GAAI/B,GAAI,EAAGA,EAAI,GAAIA,IAAK,CACzBd,UAAUxB,KAAK+C,YAEpB,IAEHkB","file":"index.js","sourcesContent":["(function(i, s, o, g, r, a, m) {\n    i['GoogleAnalyticsObject'] = r;\n    i[r] = i[r] || function() {\n        (i[r].q = i[r].q || []).push(arguments)\n    },\n    i[r].l = 1 * new Date();\n    a = s.createElement(o),\n    m = s.getElementsByTagName(o)[0];\n    a.async = 1;\n    a.src = g;\n    m.parentNode.insertBefore(a, m)\n})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');\nga('create', 'UA-25609352-3', 'auto');\nga('send', 'pageview');\n\nfunction userSwitch(id, positions, callback) {\n    let index = 0;\n    let set = positions[index];\n\n    document.getElementById(id).addEventListener('click', function(){\n        index = index >= (positions.length - 1)\n            ? 0 : index + 1;\n        set = callback(positions[index]);\n    })\n\n    return () => set;\n}\n\n(() => {\n    const container = document.getElementsByTagName('footer')[0];\n    const canvas = document.getElementsByTagName('canvas')[0];\n    const context = canvas.getContext('2d');\n    const particles = [];\n\n    const defaults = {\n        shape: 'circle',\n        phase: () => {},\n    };\n\n    const phaser = function(i, phase) {\n        return [\n            parseInt(Math.sin(0.0314 * i + 2 + phase) * 127 + 128),\n            parseInt(Math.sin(0.0314 * i + 0 + phase) * 127 + 128),\n            parseInt(Math.sin(0.0314 * i + 4 + phase) * 127 + 128),\n        ].join(',');\n    }\n\n    const colorSwitch = userSwitch('color', ['normal', 'crazy', 'rainbow'], value => {\n        console.log(value);\n        switch(value) {\n            case 'normal':\n                defaults.phase = () => null;\n            break;\n            case 'crazy':\n                defaults.phase = () => parseInt(Math.random() * 20);\n            break;\n            case 'rainbow':\n                defaults.phase = (x) => x / 180;\n            break;\n        }\n    });\n\n    const shapeSwitch = userSwitch('shape', ['circle', 'triangle', 'bar'], value => {\n        defaults.shape = value;\n    })\n\n    // keep the canvas at the right size as the window changes\n    window.addEventListener('resize', () => {\n        canvas.width = container.clientWidth;\n    });\n    window.dispatchEvent(new Event('resize'));\n\n\n\n    function color(state) {\n        return state.phase\n            ? phaser(state.y, state.phase)\n            : state.color;\n    }\n\n    function update(state) {\n        if (!state || state.alpha < 0) {\n            const radius = 0.05 + Math.random() * 5.3;\n            const x = Math.floor(Math.random() * (canvas.width - (radius*2) - 3)) + radius;\n            return {\n                x: x,\n                y: 0,\n                alpha: 0.6 + Math.random() * 0.3,\n                radius: radius,\n                velocity: Math.floor(Math.random() * 1.5) + 1,\n                color: '100,100,100',\n                phase: defaults.phase(x),\n                shape: defaults.shape,\n            };\n        }\n\n        return {\n            ...state,\n            y: state.y + state.velocity,\n            alpha: state.alpha - 0.025,\n            velocity: state.velocity + 0.1,\n            color: color(state),\n        };\n    }\n\n    const renderers = {\n        'circle': (state) => {\n            context.arc(state.x, state.y - state.radius, state.radius, 0, 6.2832);\n        },\n        'triangle': (state) => {\n            const len = state.radius * 3;\n\n            context.moveTo(state.x, state.y)\n            context.lineTo(state.x + (len/2), state.y-(len*.89))\n            context.lineTo(state.x + len, state.y)\n        },\n        'bar': (state) => {\n            const width = (state.radius * 2) + (state.alpha * 10);\n            const height = 120;\n\n            context.moveTo(state.x, state.y)\n            context.lineTo(state.x + width, state.y)\n            context.lineTo(state.x + width, state.y - height)\n            context.lineTo(state.x, state.y - height)\n        },\n    }\n\n    function draw(state) {\n        context.beginPath();\n\n        renderers[state.shape](state);\n\n        context.fillStyle = 'rgba('+ state.color +','+ state.alpha +')';\n        context.fill();\n    }\n\n    function animate() {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        for (let i = particles.length; i--;) {\n            draw(particles[i] = update(particles[i]));\n        }\n\n        requestAnimationFrame(animate);\n    }\n\n    // if we add all the particles at once then they come in waves\n    const maxBubbles = canvas.width / 10;\n    const addBubbles = setInterval(() => {\n        if (particles.length > maxBubbles) {\n            return clearInterval(addBubbles);\n        }\n\n        for (let x = 0; x < 10; x++) {\n            particles.push(update());\n        }\n    }, 100);\n\n    animate();\n})();\n"],"sourceRoot":"/source/"}